use std::fs::File;
use std::io::Read;
use std::io::Write;

#[derive(Debug)]
pub struct Page
{
    pub head: String,
    pub body: String,
}

impl Page
{
    pub fn new() -> Self
    {
        Page {
            head: "".to_string(),
            body: "".to_string(),
        }
    }

    pub fn add_style(self: &mut Self, style: &str)
    {
        self.head += &format!("<link rel=\"stylesheet\" href=\"{}\">", style);
    }

    pub fn generate(self: &mut Self) -> String
    {
        let mut result: String = format!("");
        result += "<!DOCTYPE html>";
        result += "<html>";
        result += "<head>";
        result += &self.head;
        result += "</head>";
        result += "<body>";
        result += &self.body;
        result += "</body>";
        result += "</html>";
        result += "<!-- Generated by delwg-rust -->";
        return result;
    }

    pub fn save(self: &mut Self, path: &str)
    {
        let mut file = File::create(path).unwrap();
        writeln!(&mut file, "{}", &self.generate()).unwrap();
    }
}

pub fn file_to_string(source: &str) -> String
{
    let mut file = File::open(source).unwrap();
    let mut contents = String::new();
    file.read_to_string(&mut contents).unwrap();
    return contents;
}

pub fn string_to_file(source: &str, path: &str)
{
    let mut file = File::create(path).unwrap();
    writeln!(&mut file, "{}", source).unwrap();
}
